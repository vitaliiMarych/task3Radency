{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch } from \"react-redux\";\nimport { NotesActionsTypes } from \"../types/notesTypes\";\nimport { useTypedSelector } from \"../hooks/useTypeSelector\";\nexport const NoteService = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    notes\n  } = useTypedSelector(state => state.note);\n  console.log();\n  const getActiveNotes = () => {\n    return getAllNotes().filter(note => !note.archived);\n  };\n  const getArchiveNotes = () => {\n    return getAllNotes().filter(note => note.archived);\n  };\n  const getAllNotes = () => {\n    return getTypedNotes(notes);\n  };\n  const getTypedNotes = notes => {\n    return notes;\n  };\n  const addNote = (noteContent, noteCategory) => {\n    const year = new Date().getFullYear();\n    const month = new Date().getMonth() + 1;\n    const day = new Date().getDate();\n    dispatch({\n      type: NotesActionsTypes.ADD_NOTE,\n      payload: {\n        id: Math.max(...getAllNotes().map(note => note.id)) + 1,\n        createdTime: `${year}-${month}-${day}`,\n        content: noteContent,\n        category: noteCategory,\n        archived: false\n      }\n    });\n  };\n  const removeNote = idNote => {\n    dispatch({\n      type: NotesActionsTypes.DELETE_NOTE,\n      payload: idNote\n    });\n  };\n  const archiveNote = idNote => {\n    dispatch({\n      type: NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE,\n      payload: idNote\n    });\n  };\n  const editNote = note => {\n    // dispatch({\n\n    // });\n  };\n  return {\n    notes,\n    getActiveNotes,\n    getArchiveNotes,\n    addNote,\n    removeNote,\n    archiveNote,\n    editNote\n  };\n};\n_s(NoteService, \"wtIUh3RIe4eXysSps0Ze8I0Mkxc=\", false, function () {\n  return [useDispatch, useTypedSelector];\n});\n_c = NoteService;\nvar _c;\n$RefreshReg$(_c, \"NoteService\");","map":{"version":3,"names":["useDispatch","NotesActionsTypes","useTypedSelector","NoteService","_s","dispatch","notes","state","note","console","log","getActiveNotes","getAllNotes","filter","archived","getArchiveNotes","getTypedNotes","addNote","noteContent","noteCategory","year","Date","getFullYear","month","getMonth","day","getDate","type","ADD_NOTE","payload","id","Math","max","map","createdTime","content","category","removeNote","idNote","DELETE_NOTE","archiveNote","ARCHIVE_OR_UNARCHIVE_NOTE","editNote","_c","$RefreshReg$"],"sources":["D:/gitHub/task2/src/services/noteService.ts"],"sourcesContent":["\r\nimport { useDispatch } from \"react-redux\";\r\nimport { NoteType, NotesActionsTypes } from \"../types/notesTypes\";\r\nimport { useTypedSelector } from \"../hooks/useTypeSelector\";\r\n\r\nexport const NoteService = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const {notes} = useTypedSelector(state => state.note);\r\n  console.log();\r\n\r\n  const getActiveNotes = () => {\r\n    return getAllNotes().filter(note => !note.archived);\r\n  }\r\n\r\n  const getArchiveNotes = () => {\r\n    return getAllNotes().filter(note => note.archived);\r\n  }\r\n\r\n  const getAllNotes = () => {\r\n    return getTypedNotes(notes);\r\n  }\r\n\r\n  const getTypedNotes = (notes: NoteType[]) => {\r\n    return notes;\r\n  }\r\n\r\n  const addNote = (noteContent:string, noteCategory:string) => {\r\n    const year = new Date().getFullYear();\r\n    const month = new Date().getMonth() + 1;\r\n    const day = new Date().getDate();\r\n\r\n    dispatch({\r\n      type: NotesActionsTypes.ADD_NOTE,\r\n      payload: { \r\n          id: Math.max(...getAllNotes().map(note => note.id)) + 1,\r\n          createdTime: `${year}-${month}-${day}`,\r\n          content: noteContent,\r\n          category: noteCategory,\r\n          archived: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  const removeNote = (idNote: number) => {\r\n    dispatch({\r\n      type: NotesActionsTypes.DELETE_NOTE,\r\n      payload: idNote\r\n    })\r\n  }\r\n\r\n  const archiveNote = (idNote: number) => {\r\n    dispatch({\r\n      type: NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE,\r\n      payload: idNote\r\n    })\r\n  }\r\n\r\n  const editNote = (note: NoteType) => {\r\n    // dispatch({\r\n\r\n    // });\r\n  }\r\n\r\n  return {\r\n    notes,\r\n    getActiveNotes,\r\n    getArchiveNotes,\r\n    addNote,\r\n    removeNote,\r\n    archiveNote,\r\n    editNote,\r\n  };\r\n}"],"mappings":";AACA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAAmBC,iBAAiB,QAAQ,qBAAqB;AACjE,SAASC,gBAAgB,QAAQ,0BAA0B;AAE3D,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE/B,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM;IAACM;EAAK,CAAC,GAAGJ,gBAAgB,CAACK,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EACrDC,OAAO,CAACC,GAAG,CAAC,CAAC;EAEb,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACL,IAAI,IAAI,CAACA,IAAI,CAACM,QAAQ,CAAC;EACrD,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,OAAOH,WAAW,CAAC,CAAC,CAACC,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACM,QAAQ,CAAC;EACpD,CAAC;EAED,MAAMF,WAAW,GAAGA,CAAA,KAAM;IACxB,OAAOI,aAAa,CAACV,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMU,aAAa,GAAIV,KAAiB,IAAK;IAC3C,OAAOA,KAAK;EACd,CAAC;EAED,MAAMW,OAAO,GAAGA,CAACC,WAAkB,EAAEC,YAAmB,KAAK;IAC3D,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACrC,MAAMC,KAAK,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC;IACvC,MAAMC,GAAG,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC;IAEhCrB,QAAQ,CAAC;MACPsB,IAAI,EAAE1B,iBAAiB,CAAC2B,QAAQ;MAChCC,OAAO,EAAE;QACLC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,GAAGpB,WAAW,CAAC,CAAC,CAACqB,GAAG,CAACzB,IAAI,IAAIA,IAAI,CAACsB,EAAE,CAAC,CAAC,GAAG,CAAC;QACvDI,WAAW,EAAG,GAAEd,IAAK,IAAGG,KAAM,IAAGE,GAAI,EAAC;QACtCU,OAAO,EAAEjB,WAAW;QACpBkB,QAAQ,EAAEjB,YAAY;QACtBL,QAAQ,EAAE;MACd;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMuB,UAAU,GAAIC,MAAc,IAAK;IACrCjC,QAAQ,CAAC;MACPsB,IAAI,EAAE1B,iBAAiB,CAACsC,WAAW;MACnCV,OAAO,EAAES;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,WAAW,GAAIF,MAAc,IAAK;IACtCjC,QAAQ,CAAC;MACPsB,IAAI,EAAE1B,iBAAiB,CAACwC,yBAAyB;MACjDZ,OAAO,EAAES;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,QAAQ,GAAIlC,IAAc,IAAK;IACnC;;IAEA;EAAA,CACD;EAED,OAAO;IACLF,KAAK;IACLK,cAAc;IACdI,eAAe;IACfE,OAAO;IACPoB,UAAU;IACVG,WAAW;IACXE;EACF,CAAC;AACH,CAAC;AAAAtC,EAAA,CApEYD,WAAW;EAAA,QAELH,WAAW,EACZE,gBAAgB;AAAA;AAAAyC,EAAA,GAHrBxC,WAAW;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}