{"ast":null,"code":"import { NotesActionsTypes } from \"../../types/notesTypes\";\nconst initialState = {\n  notes: [],\n  loadingNotes: false\n};\nexport const notesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case NotesActionsTypes.FETCH_NOTE:\n      {\n        return {\n          loadingNotes: true,\n          notes: []\n        };\n      }\n    case NotesActionsTypes.FETCH_NOTE_ERROR:\n      {\n        return {\n          loadingNotes: false,\n          notes: []\n        };\n      }\n    case NotesActionsTypes.FETCH_NOTE_SUCCESS:\n      {\n        return {\n          loadingNotes: false,\n          notes: action.payload\n        };\n      }\n    case NotesActionsTypes.DELETE_NOTE:\n      {\n        return {\n          ...state,\n          notes: state.notes.filter(note => note.id !== action.payload)\n        };\n      }\n    case NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE:\n      {\n        const updatedNotes = state.notes.map(note => note.id === action.payload ? {\n          ...note,\n          archived: !note.archived\n        } : note);\n        return {\n          ...state,\n          notes: updatedNotes\n        };\n      }\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["NotesActionsTypes","initialState","notes","loadingNotes","notesReducer","state","action","type","FETCH_NOTE","FETCH_NOTE_ERROR","FETCH_NOTE_SUCCESS","payload","DELETE_NOTE","filter","note","id","ARCHIVE_OR_UNARCHIVE_NOTE","updatedNotes","map","archived"],"sources":["D:/gitHub/task3Radency/client/src/store/reducers/notes.ts"],"sourcesContent":["import { NotesAction, NotesActionsTypes, NotesState } from \"../../types/notesTypes\";\r\n\r\n\r\nconst initialState: NotesState = {\r\n    notes: [],\r\n    loadingNotes: false,\r\n}\r\n\r\nexport const notesReducer = (state = initialState, action:NotesAction) => {\r\n    \r\n    switch (action.type) {\r\n        case NotesActionsTypes.FETCH_NOTE : {\r\n          return {\r\n            loadingNotes: true,\r\n            notes: [],\r\n          }\r\n        }\r\n\r\n        case NotesActionsTypes.FETCH_NOTE_ERROR : {\r\n          return {\r\n            loadingNotes: false,\r\n            notes: [],\r\n          }\r\n        }\r\n\r\n        case NotesActionsTypes.FETCH_NOTE_SUCCESS : {\r\n          return {\r\n            loadingNotes: false,\r\n            notes: action.payload,\r\n          }\r\n        }\r\n\r\n        case NotesActionsTypes.DELETE_NOTE : {\r\n          return {...state, notes: state.notes.filter(note => note.id !== action.payload)};\r\n        }\r\n\r\n        case NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE : {\r\n          const updatedNotes = state.notes.map((note) =>\r\n            note.id === action.payload ? { ...note, archived: !note.archived } : note\r\n          );\r\n          \r\n          return { ...state, notes: updatedNotes };\r\n        }\r\n        \r\n        default: \r\n            return state;\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA,SAAsBA,iBAAiB,QAAoB,wBAAwB;AAGnF,MAAMC,YAAwB,GAAG;EAC7BC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE;AAClB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAkB,KAAK;EAEtE,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKP,iBAAiB,CAACQ,UAAU;MAAG;QAClC,OAAO;UACLL,YAAY,EAAE,IAAI;UAClBD,KAAK,EAAE;QACT,CAAC;MACH;IAEA,KAAKF,iBAAiB,CAACS,gBAAgB;MAAG;QACxC,OAAO;UACLN,YAAY,EAAE,KAAK;UACnBD,KAAK,EAAE;QACT,CAAC;MACH;IAEA,KAAKF,iBAAiB,CAACU,kBAAkB;MAAG;QAC1C,OAAO;UACLP,YAAY,EAAE,KAAK;UACnBD,KAAK,EAAEI,MAAM,CAACK;QAChB,CAAC;MACH;IAEA,KAAKX,iBAAiB,CAACY,WAAW;MAAG;QACnC,OAAO;UAAC,GAAGP,KAAK;UAAEH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACW,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAACK,OAAO;QAAC,CAAC;MAClF;IAEA,KAAKX,iBAAiB,CAACgB,yBAAyB;MAAG;QACjD,MAAMC,YAAY,GAAGZ,KAAK,CAACH,KAAK,CAACgB,GAAG,CAAEJ,IAAI,IACxCA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAACK,OAAO,GAAG;UAAE,GAAGG,IAAI;UAAEK,QAAQ,EAAE,CAACL,IAAI,CAACK;QAAS,CAAC,GAAGL,IACvE,CAAC;QAED,OAAO;UAAE,GAAGT,KAAK;UAAEH,KAAK,EAAEe;QAAa,CAAC;MAC1C;IAEA;MACI,OAAOZ,KAAK;EACpB;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}