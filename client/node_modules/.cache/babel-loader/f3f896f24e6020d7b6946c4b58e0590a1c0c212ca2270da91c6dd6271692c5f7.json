{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitHub\\\\task3\\\\client\\\\src\\\\components\\\\UI\\\\ButtonDiv\\\\ButtonDiv.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport cl from './ButtonDiv.module.css';\nimport ActionLink from '../actionLink/ActionLink';\nimport editIcon from '../../../assets/icons/edit.png';\nimport archiveIcon from '../../../assets/icons/archive.png';\nimport unarchiveIcon from '../../../assets/icons/unarchive.png';\nimport deleteIcon from '../../../assets/icons/delete.png';\nimport { NotesActionsTypes } from '../../../types/notesTypes';\nimport { useDispatch } from 'react-redux';\nimport { modalTypes } from '../../../types/modalType';\nimport axios from 'axios';\nimport { useActions } from '../../../hooks/useActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonDiv = ({\n  extraClasses,\n  idNote,\n  setModalProperties\n}) => {\n  _s();\n  const [thisNote, setThisNote] = React.useState({\n    id: -1,\n    createdTime: \"\",\n    content: \"\",\n    category: \"\",\n    archived: false\n  });\n  useEffect(() => {\n    axios.get('http://localhost:4444/notes/' + idNote).then(res => {\n      setThisNote(res.data);\n    }).catch(err => {\n      alert('Error');\n    });\n  }, []);\n  const dispatch = useDispatch();\n  const {\n    fetchNotesStats\n  } = useActions();\n  const deleteNote = async () => {\n    await axios.delete('http://localhost:4444/notes/' + idNote);\n    fetchNotesStats();\n    // We could do reload all data with fetchNote() but it`s not good for user\n    dispatch({\n      type: NotesActionsTypes.DELETE_NOTE,\n      payload: idNote\n    });\n  };\n  const archiveNote = async () => {\n    let data = JSON.stringify({\n      \"noteContent\": thisNote.content,\n      \"noteCategory\": thisNote.category,\n      \"archived\": !thisNote.archived\n    });\n    let config = {\n      method: 'patch',\n      maxBodyLength: Infinity,\n      url: 'http://localhost:4444/notes/' + idNote,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    await axios.request(config);\n    dispatch({\n      type: NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE,\n      payload: idNote\n    });\n  };\n  const isArchived = extraClasses.includes('archive');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cl.buttonDiv,\n    children: [/*#__PURE__*/_jsxDEV(ActionLink, {\n      imageUrl: editIcon,\n      alt: \"edit\",\n      onClickFunct: () => {\n        if (thisNote !== undefined) {\n          setModalProperties({\n            visible: true,\n            oldNoteContent: thisNote.content,\n            oldNoteCategory: thisNote.category,\n            modalType: modalTypes.EDIT,\n            index: idNote\n          });\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), isArchived ? /*#__PURE__*/_jsxDEV(ActionLink, {\n      imageUrl: unarchiveIcon,\n      alt: \"unarchive\",\n      onClickFunct: archiveNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(ActionLink, {\n      imageUrl: archiveIcon,\n      alt: \"archive\",\n      onClickFunct: archiveNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ActionLink, {\n      imageUrl: deleteIcon,\n      alt: \"delete\",\n      onClickFunct: () => deleteNote()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ButtonDiv, \"Ecci0BRx4VM6ueBpdd+ylTNk5Lk=\", false, function () {\n  return [useDispatch, useActions];\n});\n_c = ButtonDiv;\nexport default ButtonDiv;\nvar _c;\n$RefreshReg$(_c, \"ButtonDiv\");","map":{"version":3,"names":["React","useEffect","cl","ActionLink","editIcon","archiveIcon","unarchiveIcon","deleteIcon","NotesActionsTypes","useDispatch","modalTypes","axios","useActions","jsxDEV","_jsxDEV","ButtonDiv","extraClasses","idNote","setModalProperties","_s","thisNote","setThisNote","useState","id","createdTime","content","category","archived","get","then","res","data","catch","err","alert","dispatch","fetchNotesStats","deleteNote","delete","type","DELETE_NOTE","payload","archiveNote","JSON","stringify","config","method","maxBodyLength","Infinity","url","headers","request","ARCHIVE_OR_UNARCHIVE_NOTE","isArchived","includes","className","buttonDiv","children","imageUrl","alt","onClickFunct","undefined","visible","oldNoteContent","oldNoteCategory","modalType","EDIT","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/gitHub/task3/client/src/components/UI/ButtonDiv/ButtonDiv.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nimport cl from './ButtonDiv.module.css';\r\nimport ActionLink from '../actionLink/ActionLink';\r\nimport editIcon from '../../../assets/icons/edit.png';\r\nimport archiveIcon from '../../../assets/icons/archive.png';\r\nimport unarchiveIcon from '../../../assets/icons/unarchive.png';\r\nimport deleteIcon from '../../../assets/icons/delete.png';\r\nimport { NotesActionsTypes } from '../../../types/notesTypes';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from '../../../hooks/useTypeSelector';\r\nimport { modalTypes } from '../../../types/modalType';\r\nimport axios from 'axios';\r\nimport { useActions } from '../../../hooks/useActions';\r\n\r\ninterface ButtonDivProps {\r\n  extraClasses : string,\r\n  idNote: number,\r\n  setModalProperties: Function\r\n}\r\n\r\nconst ButtonDiv: React.FC<ButtonDivProps> = ({\r\n  extraClasses,\r\n  idNote,\r\n  setModalProperties,\r\n}) => {\r\n\r\n  const [thisNote, setThisNote] = React.useState({\r\n    id: -1,\r\n    createdTime: \"\",\r\n    content: \"\",\r\n    category: \"\",\r\n    archived: false,\r\n  });\r\n  \r\n  useEffect(() => {\r\n    axios.get('http://localhost:4444/notes/' + idNote).then((res) => {\r\n      setThisNote(res.data);\r\n    }).catch(err =>{\r\n      alert('Error');\r\n    })\r\n  }, []);\r\n\r\n  const dispatch = useDispatch();\r\n  const {fetchNotesStats} = useActions()\r\n\r\n  const deleteNote = async () => {\r\n    await axios.delete('http://localhost:4444/notes/' + idNote);\r\n\r\n    fetchNotesStats();\r\n    // We could do reload all data with fetchNote() but it`s not good for user\r\n    dispatch({\r\n      type: NotesActionsTypes.DELETE_NOTE,\r\n      payload: idNote\r\n    })\r\n  }\r\n\r\n  const archiveNote = async () => {\r\n    let data = JSON.stringify({\r\n      \"noteContent\": thisNote.content,\r\n      \"noteCategory\": thisNote.category,\r\n      \"archived\": !thisNote.archived\r\n    });\r\n    \r\n    let config = {\r\n      method: 'patch',\r\n      maxBodyLength: Infinity,\r\n      url: 'http://localhost:4444/notes/' + idNote,\r\n      headers: { \r\n        'Content-Type': 'application/json'\r\n      },\r\n      data : data\r\n    };\r\n    \r\n    await axios.request(config)\r\n    \r\n    dispatch({\r\n      type: NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE,\r\n      payload: idNote\r\n    })\r\n  }\r\n\r\n  const isArchived = extraClasses.includes('archive');\r\n\r\n  return (\r\n    <div className={cl.buttonDiv}>\r\n        <ActionLink imageUrl={editIcon} alt='edit' onClickFunct={() => {\r\n          if (thisNote !== undefined){\r\n            setModalProperties({\r\n              visible: true,\r\n              oldNoteContent: thisNote.content,\r\n              oldNoteCategory: thisNote.category,\r\n              modalType: modalTypes.EDIT,\r\n              index: idNote,\r\n            })\r\n          }\r\n        }}/>\r\n\r\n        {\r\n        isArchived ? \r\n          <ActionLink imageUrl={unarchiveIcon} alt='unarchive' onClickFunct={archiveNote}/> :\r\n          <ActionLink imageUrl={archiveIcon} alt='archive' onClickFunct={archiveNote}/>  \r\n        }\r\n\r\n        <ActionLink imageUrl={deleteIcon} alt='delete' onClickFunct={() => deleteNote()}/>\r\n    </div>\r\n  );\r\n}\r\n  \r\n  \r\nexport default ButtonDiv;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,OAAOC,EAAE,MAAM,wBAAwB;AACvC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,WAAW,MAAM,mCAAmC;AAC3D,OAAOC,aAAa,MAAM,qCAAqC;AAC/D,OAAOC,UAAU,MAAM,kCAAkC;AACzD,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQvD,MAAMC,SAAmC,GAAGA,CAAC;EAC3CC,YAAY;EACZC,MAAM;EACNC;AACF,CAAC,KAAK;EAAAC,EAAA;EAEJ,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,KAAK,CAACsB,QAAQ,CAAC;IAC7CC,EAAE,EAAE,CAAC,CAAC;IACNC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF1B,SAAS,CAAC,MAAM;IACdU,KAAK,CAACiB,GAAG,CAAC,8BAA8B,GAAGX,MAAM,CAAC,CAACY,IAAI,CAAEC,GAAG,IAAK;MAC/DT,WAAW,CAACS,GAAG,CAACC,IAAI,CAAC;IACvB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAG;MACbC,KAAK,CAAC,OAAO,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,QAAQ,GAAG1B,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAC2B;EAAe,CAAC,GAAGxB,UAAU,CAAC,CAAC;EAEtC,MAAMyB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAM1B,KAAK,CAAC2B,MAAM,CAAC,8BAA8B,GAAGrB,MAAM,CAAC;IAE3DmB,eAAe,CAAC,CAAC;IACjB;IACAD,QAAQ,CAAC;MACPI,IAAI,EAAE/B,iBAAiB,CAACgC,WAAW;MACnCC,OAAO,EAAExB;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMyB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIX,IAAI,GAAGY,IAAI,CAACC,SAAS,CAAC;MACxB,aAAa,EAAExB,QAAQ,CAACK,OAAO;MAC/B,cAAc,EAAEL,QAAQ,CAACM,QAAQ;MACjC,UAAU,EAAE,CAACN,QAAQ,CAACO;IACxB,CAAC,CAAC;IAEF,IAAIkB,MAAM,GAAG;MACXC,MAAM,EAAE,OAAO;MACfC,aAAa,EAAEC,QAAQ;MACvBC,GAAG,EAAE,8BAA8B,GAAGhC,MAAM;MAC5CiC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDnB,IAAI,EAAGA;IACT,CAAC;IAED,MAAMpB,KAAK,CAACwC,OAAO,CAACN,MAAM,CAAC;IAE3BV,QAAQ,CAAC;MACPI,IAAI,EAAE/B,iBAAiB,CAAC4C,yBAAyB;MACjDX,OAAO,EAAExB;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMoC,UAAU,GAAGrC,YAAY,CAACsC,QAAQ,CAAC,SAAS,CAAC;EAEnD,oBACExC,OAAA;IAAKyC,SAAS,EAAErD,EAAE,CAACsD,SAAU;IAAAC,QAAA,gBACzB3C,OAAA,CAACX,UAAU;MAACuD,QAAQ,EAAEtD,QAAS;MAACuD,GAAG,EAAC,MAAM;MAACC,YAAY,EAAEA,CAAA,KAAM;QAC7D,IAAIxC,QAAQ,KAAKyC,SAAS,EAAC;UACzB3C,kBAAkB,CAAC;YACjB4C,OAAO,EAAE,IAAI;YACbC,cAAc,EAAE3C,QAAQ,CAACK,OAAO;YAChCuC,eAAe,EAAE5C,QAAQ,CAACM,QAAQ;YAClCuC,SAAS,EAAEvD,UAAU,CAACwD,IAAI;YAC1BC,KAAK,EAAElD;UACT,CAAC,CAAC;QACJ;MACF;IAAE;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAGJlB,UAAU,gBACRvC,OAAA,CAACX,UAAU;MAACuD,QAAQ,EAAEpD,aAAc;MAACqD,GAAG,EAAC,WAAW;MAACC,YAAY,EAAElB;IAAY;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,gBACjFzD,OAAA,CAACX,UAAU;MAACuD,QAAQ,EAAErD,WAAY;MAACsD,GAAG,EAAC,SAAS;MAACC,YAAY,EAAElB;IAAY;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAG/EzD,OAAA,CAACX,UAAU;MAACuD,QAAQ,EAAEnD,UAAW;MAACoD,GAAG,EAAC,QAAQ;MAACC,YAAY,EAAEA,CAAA,KAAMvB,UAAU,CAAC;IAAE;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEV,CAAC;AAAApD,EAAA,CAtFKJ,SAAmC;EAAA,QAsBtBN,WAAW,EACFG,UAAU;AAAA;AAAA4D,EAAA,GAvBhCzD,SAAmC;AAyFzC,eAAeA,SAAS;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}