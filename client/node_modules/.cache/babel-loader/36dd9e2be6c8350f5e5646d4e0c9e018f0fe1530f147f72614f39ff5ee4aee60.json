{"ast":null,"code":"import { extractDatesMentioned } from \"./utilsData\";\nexport const isBig = index => {\n  if (index === 1) {\n    return true;\n  }\n  return false;\n};\nexport function updateObject(oldObject, propertyToChange, newValue) {\n  const updatedObject = {\n    ...oldObject\n  };\n  updatedObject[propertyToChange] = newValue;\n  return updatedObject;\n}\nexport const getCells = item => {\n  if ('activeCount' in item) {\n    return getNoteCellsCategory(item);\n  }\n  return getNoteCells(item);\n};\nconst getNoteCells = note => {\n  const datesMentioned = extractDatesMentioned(note.content);\n  const cells = [note.createdTime, note.content, note.category, datesMentioned.join(', ')];\n  return cells;\n};\nconst getNoteCellsCategory = categoryInfo => {\n  return [categoryInfo.category.toString, categoryInfo.activeCount.toString, categoryInfo.archivedCount.toString];\n};","map":{"version":3,"names":["extractDatesMentioned","isBig","index","updateObject","oldObject","propertyToChange","newValue","updatedObject","getCells","item","getNoteCellsCategory","getNoteCells","note","datesMentioned","content","cells","createdTime","category","join","categoryInfo","toString","activeCount","archivedCount"],"sources":["D:/gitHub/task3/client/src/utils/otherUtils.ts"],"sourcesContent":["import { CategoryType } from \"../types/categoryTypes\";\r\nimport { NoteType } from \"../types/notesTypes\";\r\nimport { extractDatesMentioned } from \"./utilsData\";\r\n\r\nexport const isBig = (index: number) => {\r\n    if (index === 1){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function updateObject<T>(oldObject: T, propertyToChange: keyof T, newValue: T[keyof T]): T {\r\n    const updatedObject = { ...oldObject };\r\n  \r\n    updatedObject[propertyToChange] = newValue;\r\n  \r\n    return updatedObject;\r\n  }\r\n\r\nexport const getCells = (item: NoteType | CategoryType) => {\r\n  if ('activeCount' in item) {\r\n    return getNoteCellsCategory(item)\r\n  }\r\n  return getNoteCells(item);\r\n}\r\n\r\nconst getNoteCells = (note: NoteType) => {\r\n  const datesMentioned = extractDatesMentioned(note.content);\r\n  const cells = [note.createdTime, note.content, note.category, datesMentioned.join(', '),];\r\n\r\n  return cells;\r\n} \r\n\r\nconst getNoteCellsCategory = (categoryInfo: CategoryType) => {\r\n    return [categoryInfo.category.toString, categoryInfo.activeCount.toString, categoryInfo.archivedCount.toString];\r\n}\r\n\r\n\r\n"],"mappings":"AAEA,SAASA,qBAAqB,QAAQ,aAAa;AAEnD,OAAO,MAAMC,KAAK,GAAIC,KAAa,IAAK;EACpC,IAAIA,KAAK,KAAK,CAAC,EAAC;IACZ,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB,CAAC;AAED,OAAO,SAASC,YAAYA,CAAIC,SAAY,EAAEC,gBAAyB,EAAEC,QAAoB,EAAK;EAC9F,MAAMC,aAAa,GAAG;IAAE,GAAGH;EAAU,CAAC;EAEtCG,aAAa,CAACF,gBAAgB,CAAC,GAAGC,QAAQ;EAE1C,OAAOC,aAAa;AACtB;AAEF,OAAO,MAAMC,QAAQ,GAAIC,IAA6B,IAAK;EACzD,IAAI,aAAa,IAAIA,IAAI,EAAE;IACzB,OAAOC,oBAAoB,CAACD,IAAI,CAAC;EACnC;EACA,OAAOE,YAAY,CAACF,IAAI,CAAC;AAC3B,CAAC;AAED,MAAME,YAAY,GAAIC,IAAc,IAAK;EACvC,MAAMC,cAAc,GAAGb,qBAAqB,CAACY,IAAI,CAACE,OAAO,CAAC;EAC1D,MAAMC,KAAK,GAAG,CAACH,IAAI,CAACI,WAAW,EAAEJ,IAAI,CAACE,OAAO,EAAEF,IAAI,CAACK,QAAQ,EAAEJ,cAAc,CAACK,IAAI,CAAC,IAAI,CAAC,CAAE;EAEzF,OAAOH,KAAK;AACd,CAAC;AAED,MAAML,oBAAoB,GAAIS,YAA0B,IAAK;EACzD,OAAO,CAACA,YAAY,CAACF,QAAQ,CAACG,QAAQ,EAAED,YAAY,CAACE,WAAW,CAACD,QAAQ,EAAED,YAAY,CAACG,aAAa,CAACF,QAAQ,CAAC;AACnH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}