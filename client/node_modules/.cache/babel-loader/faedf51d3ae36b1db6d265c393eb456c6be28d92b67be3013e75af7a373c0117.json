{"ast":null,"code":"var _s = $RefreshSig$();\nimport { NotesActionsTypes } from \"../types/notesTypes\";\nimport { useTypedSelector } from \"../hooks/useTypeSelector\";\nexport const noteService = () => {\n  _s();\n  const {\n    notes\n  } = useTypedSelector(state => state.note);\n  const getActiveNotes = () => {\n    return getTypedNotes(notes).filter(note => !note.archived);\n  };\n  const getArchiveNotes = () => {\n    return getTypedNotes(notes).filter(note => note.archived);\n  };\n  const getNotes = () => {\n    return notes;\n  };\n  const getTypedNotes = notes => {\n    return notes;\n  };\n  const addNote = (noteContent, noteCategory) => {\n    const year = new Date().getFullYear();\n    const month = new Date().getMonth() + 1;\n    const day = new Date().getDate();\n    dispatch({\n      type: NotesActionsTypes.ADD_NOTE,\n      payload: {\n        id: Math.max(...getTypedNotes(notes).map(note => note.id)) + 1,\n        createdTime: `${year}-${month}-${day}`,\n        content: noteContent,\n        category: noteCategory,\n        archived: false\n      }\n    });\n  };\n  const removeNote = idNote => {\n    dispatch({\n      type: NotesActionsTypes.DELETE_NOTE,\n      payload: idNote\n    });\n  };\n  const archiveNote = idNote => {\n    dispatch({\n      type: NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE,\n      payload: idNote\n    });\n  };\n  const editNote = note => {\n    // dispatch({\n\n    // });\n  };\n};\n_s(noteService, \"LDxHhvc09wxgry9Y0MQNYUHatw4=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"names":["NotesActionsTypes","useTypedSelector","noteService","_s","notes","state","note","getActiveNotes","getTypedNotes","filter","archived","getArchiveNotes","getNotes","addNote","noteContent","noteCategory","year","Date","getFullYear","month","getMonth","day","getDate","dispatch","type","ADD_NOTE","payload","id","Math","max","map","createdTime","content","category","removeNote","idNote","DELETE_NOTE","archiveNote","ARCHIVE_OR_UNARCHIVE_NOTE","editNote"],"sources":["D:/gitHub/task2/src/services/noteService.ts"],"sourcesContent":["\r\nimport { useDispatch } from \"react-redux\";\r\nimport { NoteType, NotesActionsTypes } from \"../types/notesTypes\";\r\nimport { useTypedSelector } from \"../hooks/useTypeSelector\";\r\nimport { Category } from \"../types/categoryTypes\";\r\n\r\nexport const noteService = () => {\r\n\r\n  const {notes} = useTypedSelector(state => state.note);\r\n\r\n  const getActiveNotes = () => {\r\n    return getTypedNotes(notes).filter(note => !note.archived);\r\n  }\r\n\r\n  const getArchiveNotes = () => {\r\n    return getTypedNotes(notes).filter(note => note.archived);\r\n  }\r\n\r\n  const getNotes = () => {\r\n    return notes;\r\n  }\r\n\r\n  const getTypedNotes = (notes: NoteType[]) => {\r\n    return notes;\r\n  }\r\n\r\n  const addNote = (noteContent:string, noteCategory:string) => {\r\n    const year = new Date().getFullYear();\r\n    const month = new Date().getMonth() + 1;\r\n    const day = new Date().getDate();\r\n\r\n    dispatch({\r\n      type: NotesActionsTypes.ADD_NOTE,\r\n      payload: { \r\n          id: Math.max(...getTypedNotes(notes).map(note => note.id)) + 1,\r\n          createdTime: `${year}-${month}-${day}`,\r\n          content: noteContent,\r\n          category: noteCategory,\r\n          archived: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  const removeNote = (idNote: number) => {\r\n    dispatch({\r\n      type: NotesActionsTypes.DELETE_NOTE,\r\n      payload: idNote\r\n    })\r\n  }\r\n\r\n  const archiveNote = (idNote: number) => {\r\n    dispatch({\r\n      type: NotesActionsTypes.ARCHIVE_OR_UNARCHIVE_NOTE,\r\n      payload: idNote\r\n    })\r\n  }\r\n\r\n  const editNote = (note: NoteType) => {\r\n    // dispatch({\r\n\r\n    // });\r\n  }\r\n\r\n}"],"mappings":";AAEA,SAAmBA,iBAAiB,QAAQ,qBAAqB;AACjE,SAASC,gBAAgB,QAAQ,0BAA0B;AAG3D,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE/B,MAAM;IAACC;EAAK,CAAC,GAAGH,gBAAgB,CAACI,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EAErD,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOC,aAAa,CAACJ,KAAK,CAAC,CAACK,MAAM,CAACH,IAAI,IAAI,CAACA,IAAI,CAACI,QAAQ,CAAC;EAC5D,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,OAAOH,aAAa,CAACJ,KAAK,CAAC,CAACK,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACI,QAAQ,CAAC;EAC3D,CAAC;EAED,MAAME,QAAQ,GAAGA,CAAA,KAAM;IACrB,OAAOR,KAAK;EACd,CAAC;EAED,MAAMI,aAAa,GAAIJ,KAAiB,IAAK;IAC3C,OAAOA,KAAK;EACd,CAAC;EAED,MAAMS,OAAO,GAAGA,CAACC,WAAkB,EAAEC,YAAmB,KAAK;IAC3D,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACrC,MAAMC,KAAK,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC;IACvC,MAAMC,GAAG,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC;IAEhCC,QAAQ,CAAC;MACPC,IAAI,EAAExB,iBAAiB,CAACyB,QAAQ;MAChCC,OAAO,EAAE;QACLC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,GAAGrB,aAAa,CAACJ,KAAK,CAAC,CAAC0B,GAAG,CAACxB,IAAI,IAAIA,IAAI,CAACqB,EAAE,CAAC,CAAC,GAAG,CAAC;QAC9DI,WAAW,EAAG,GAAEf,IAAK,IAAGG,KAAM,IAAGE,GAAI,EAAC;QACtCW,OAAO,EAAElB,WAAW;QACpBmB,QAAQ,EAAElB,YAAY;QACtBL,QAAQ,EAAE;MACd;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMwB,UAAU,GAAIC,MAAc,IAAK;IACrCZ,QAAQ,CAAC;MACPC,IAAI,EAAExB,iBAAiB,CAACoC,WAAW;MACnCV,OAAO,EAAES;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,WAAW,GAAIF,MAAc,IAAK;IACtCZ,QAAQ,CAAC;MACPC,IAAI,EAAExB,iBAAiB,CAACsC,yBAAyB;MACjDZ,OAAO,EAAES;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,QAAQ,GAAIjC,IAAc,IAAK;IACnC;;IAEA;EAAA,CACD;AAEH,CAAC;AAAAH,EAAA,CAzDYD,WAAW;EAAA,QAEND,gBAAgB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}