{"ast":null,"code":"import { Category } from \"../types/categoryTypes\";\nimport { getNotes, getTypedNotes } from \"./noteService\";\nconst getInfoAboutCategory = (notes, category) => {\n  const activeCount = notes.filter(note => note.category === category && !note.archived).length;\n  const archivedCount = notes.filter(note => note.category === category && note.archived).length;\n  return {\n    id: -1,\n    category: category,\n    activeCount,\n    archivedCount\n  };\n};\nexport const getInfoAboutCategoryes = () => {\n  const notes = getTypedNotes(getNotes());\n  const categoryes = [Category.IDEA, Category.RANDOM_THOUGHT, Category.TASK];\n  let result = [];\n  categoryes.forEach((category, index) => {\n    result.push(getInfoAboutCategory(notes, category));\n  });\n  return result;\n};","map":{"version":3,"names":["Category","getNotes","getTypedNotes","getInfoAboutCategory","notes","category","activeCount","filter","note","archived","length","archivedCount","id","getInfoAboutCategoryes","categoryes","IDEA","RANDOM_THOUGHT","TASK","result","forEach","index","push"],"sources":["D:/gitHub/task2/src/services/categoryService.ts"],"sourcesContent":["import { Category, CategoryType } from \"../types/categoryTypes\";\r\nimport { NoteType } from \"../types/notesTypes\";\r\nimport { getNotes, getTypedNotes } from \"./noteService\";\r\n\r\nconst getInfoAboutCategory = (notes: NoteType[], category: Category) => {\r\n\r\n  const activeCount = notes.filter(note => note.category === category && !note.archived).length;\r\n  const archivedCount = notes.filter(note => note.category === category && note.archived).length;\r\n\r\n  return {\r\n    id: -1,\r\n    category: category,\r\n    activeCount,\r\n    archivedCount\r\n  }\r\n}\r\n\r\nexport const getInfoAboutCategoryes = () => {\r\n    const notes = getTypedNotes(getNotes());\r\n    const categoryes = [Category.IDEA, Category.RANDOM_THOUGHT, Category.TASK];\r\n    let result: CategoryType[] = [];\r\n\r\n    categoryes.forEach((category, index) => {\r\n        result.push(getInfoAboutCategory(notes, category));\r\n    })\r\n\r\n    return result;\r\n}\r\n\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAsB,wBAAwB;AAE/D,SAASC,QAAQ,EAAEC,aAAa,QAAQ,eAAe;AAEvD,MAAMC,oBAAoB,GAAGA,CAACC,KAAiB,EAAEC,QAAkB,KAAK;EAEtE,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACH,QAAQ,KAAKA,QAAQ,IAAI,CAACG,IAAI,CAACC,QAAQ,CAAC,CAACC,MAAM;EAC7F,MAAMC,aAAa,GAAGP,KAAK,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACH,QAAQ,KAAKA,QAAQ,IAAIG,IAAI,CAACC,QAAQ,CAAC,CAACC,MAAM;EAE9F,OAAO;IACLE,EAAE,EAAE,CAAC,CAAC;IACNP,QAAQ,EAAEA,QAAQ;IAClBC,WAAW;IACXK;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAME,sBAAsB,GAAGA,CAAA,KAAM;EACxC,MAAMT,KAAK,GAAGF,aAAa,CAACD,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAMa,UAAU,GAAG,CAACd,QAAQ,CAACe,IAAI,EAAEf,QAAQ,CAACgB,cAAc,EAAEhB,QAAQ,CAACiB,IAAI,CAAC;EAC1E,IAAIC,MAAsB,GAAG,EAAE;EAE/BJ,UAAU,CAACK,OAAO,CAAC,CAACd,QAAQ,EAAEe,KAAK,KAAK;IACpCF,MAAM,CAACG,IAAI,CAAClB,oBAAoB,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAAC;EACtD,CAAC,CAAC;EAEF,OAAOa,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}